name: Publish

on:
  push:
    tags:
    - '*'

jobs:
  clojars-publish:
    runs-on: ubuntu-latest
    steps:
      # useful for Continuous Deployment developing
    - name: validate if it is refs/tags/
      if: startsWith(github.ref,'refs/tags/') != true
      run: exit 1

    - name: checkout
      uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Cache maven dependencies
      uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          maven-

    - name: Set TAG value from refs/tags/TAG
      run: echo ::set-env name=GIT_TAG::${GITHUB_REF#refs/tags/}

    - name: Install java
      uses: actions/setup-java@v1
      with:
        java-version: '1.8'

    - name: Install clojure
      uses: DeLaGuardo/setup-clojure@2.0
      with:
        tools-deps: 'latest'

    - name: Overwrite pom.xml
      run: |
        sed -i 's;<version/>;<version>${{ env.GIT_TAG }}</version>;' pom.xml
        sed -i 's;<tag/>;<tag>${{ github.sha }}</tag>;' pom.xml

    - name: Compile java classes
      run: |
        javac $(find . -name '*.java' -type f)

    - name: Debug pom.xml
      run: cat pom.xml

    - name: Deploy to Clojars
      env:
        CLOJARS_USERNAME: ${{ secrets.CLOJARS_USERNAME }}
        CLOJARS_PASSWORD: ${{ secrets.CLOJARS_PASSWORD }}
      run: mvn -s .m2/settings.xml deploy

  npm-publish:
    runs-on: ubuntu-latest
    steps:
      # useful for Continuous Deployment developing
    - name: validate if it is refs/tags/
      if: startsWith(github.ref,'refs/tags/') != true
      run: exit 1

    - name: checkout
      uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Cache maven dependencies
      uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: npm-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          npm-

    - name: Set TAG value from refs/tags/TAG
      run: echo ::set-env name=GIT_TAG::${GITHUB_REF#refs/tags/}

    - name: Install java
      uses: actions/setup-java@v1
      with:
        java-version: '1.8'

    - name: Install clojure
      uses: DeLaGuardo/setup-clojure@2.0
      with:
        tools-deps: 'latest'

    - name: Install NodeJS
      uses: actions/setup-node@v1
      with:
        node-version: 13.9.x

    - name: Build JS
      run: |
        clojure -A:cljs:cljs-build

    - name: Prepare package
      run: |
        mkdir -p npm-package
        cp js/min/axel_f.min.js npm-package/axel_f.js
        cp js/min/axel_f.js.map npm-package/axel_f.js.map
        cp LICENSE npm-package/LICENSE
        cp release-js/* npm-package/
        sed -i 's;%version%;${{ env.GIT_TAG }};' npm-package/package.json

    - name: NPM deploy
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        npm install -g npm-snapshot
        echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
        cd npm-package
        BUILD_TAG=$(if [[ $GIT_TAG == *SNAPSHOT ]]; then npm-snapshot "$(date +%s)"; else echo "latest"; fi)
        npm publish --tag $BUILD_TAG
